import numpy as np
import pandas as pd
import seaborn as sns
import pickle as pck
import matplotlib.pyplot as plt
import sys, os
import warnings

from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, RobustScaler

if not sys.warnoptions:
    warnings.simplefilter("ignore")
    os.environ["PYTHONWARNINGS"] = "ignore"

pd.set_option('display.max_rows',500)
pd.set_option('display.max_columns',500)
pd.set_option('display.width',1000)

# Loading dataset from training
data = pd.read_csv('Malware_dynamic.csv', sep=',')


x = data.drop(['Name', 'label'], axis = 1)
y = data['label']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=101)
x_train.head()

print(x_train.head())


#scaler = StandardScaler() #first case using this scaler
scaler = RobustScaler() #second case using this scaler
x_scaled = scaler.fit_transform(x_train)

x_new = pd.DataFrame(x_scaled, columns=x.columns)
x_new.head()

skpca = PCA(n_components=55)
x_pca = skpca.fit_transform(x_new)
print('Variance sum : ', skpca.explained_variance_ratio_.cumsum()[-1])

from sklearn.ensemble import RandomForestClassifier as RFC
from sklearn.metrics import classification_report, confusion_matrix

model = RFC(n_estimators=100, random_state=0, oob_score= True, max_depth=30, max_features= 'sqrt')
model.fit(x_pca, y_train)

x_test_scaled = scaler.transform(x_test)
x_test_new = pd.DataFrame(x_test_scaled, columns=x.columns)
x_test_pca = skpca.transform(x_test_new)

y_pred = model.predict(x_test_pca)
print(classification_report(y_pred, y_test))

sns.heatmap(confusion_matrix(y_pred, y_test), annot = True,
                  fmt="d", cmap=plt.cm.Accent, cbar=False, linewidths=1)
plt.show()
